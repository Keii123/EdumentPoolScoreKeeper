@model PoolScoreKeeper.Models.ScoreBoard

@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <div class="col-md-4">
        <div class="player-wrapper">
            <img src="~/Images/gold_medal.png" class="medal" />
                <select id="winnerSelect" class="form-control styled-select">
                    <option>Select winner</option>
                    @foreach (var player in Model.Players)
                    {
                        <option value="@player.Id">@player.FirstName @player.LastName</option>
                    }
                </select>
                <div class="eightball">
                    <input id="winnerPocketedEightball" type="radio" name="winnerPocketedEightball" checked class="hidden"/>
                    <img src="~/Images/eightball.png" class="eightball-radio-btn active-eightball" />
                </div>
        </div>
    </div>

    <div class="col-md-4 text-center">
        <div id="registerGame" class="btn btn-success btn-lg submit-btn">SUBMIT GAME</div><br />
        <div id="compare" class="btn btn-success btn-lg submit-btn">COMPARE</div>
    </div>

    <div class="col-md-4">
        <div class="player-wrapper">
            <img src="~/Images/silver_medal.png" class="medal" />
                <select id="loserSelect" class="form-control styled-select">
                    <option>Select runner up</option>
                    @foreach (var player in Model.Players)
                    {
                        <option value="@player.Id">@player.FirstName @player.LastName</option>
                    }
                </select>
                <div class="eightball">
                    <input id="loserPocketedEightball" type="radio" name="winnerPocketedEightball" class="hidden"/>
                    <img src="~/Images/eightball.png" class="eightball-radio-btn"/>
                </div>
        </div>
    </div>
</div>

<table class="table table-striped scoreboard">
    <thead>
        <tr>
            <th>
                <div class="row">
                    <div class="col-xs-4"></div>
                    <div class="col-xs-4">Wins&darr;</div>
                    <div class="col-xs-4">Losses&rarr;</div>
                </div>
            </th>
            @foreach (var player in Model.Players)
            {
                <th data-player-name="@(player.FirstName + " " + player.LastName)">@player.FirstName</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.Scores.GetLength(0); i++)
        {
            var player = Model.Players[i];
            <tr data-player-name="@(player.FirstName + " " + player.LastName)">
                @{
                    var wins = 0;
                    var losses = 0;
                    for (int j = 0; j < Model.Scores.GetLength(0); j++)
                    {
                        wins += Model.Scores[i, j];
                        losses += Model.Scores[j, i];
                    }
                    var ratio = losses != 0 ? (((double)wins / (double)losses) * 100).ToString("N0") : (wins * 100).ToString();
                }

                <td><strong>@player.FirstName "@player.NickName" @player.LastName (@(wins + "/" + losses + "/" + ratio + "%"))</strong></td>
                @*<td><strong>@player.FirstName @player.LastName (@("W" + wins + " L" + losses + " R" + ratio))</strong></td>*@
                @for (int j = 0; j < Model.Scores.GetLength(1); j++)
                {
                    if (i == j)
                    {
                        <td>-</td>
                    }
                    else
                    {
                        <td>@Model.Scores[i, j]</td>
                    }
                }
            </tr>
                    }
    </tbody>
    <tfoot>
        <tr>
            <th>
                <div class="row">
                    <div class="col-xs-4"></div>
                    <div class="col-xs-4">Wins&uarr;</div>
                    <div class="col-xs-4">Losses&rarr;</div>
                </div>
            </th>
            @foreach (var player in Model.Players)
            {
                <th>@player.FirstName</th>
            }
        </tr>
    </tfoot>
</table>


<script>
    $(function () {
        $('#registerGame').click(function () {
            if (!bothPlayerSelected()) {
                Notify("Select both winner and runner up", "danger", false);
                return;
            }
            $.ajax({
                url: '/Home/RegisterGame',
                data: {
                    WinnerId: $('#winnerSelect').val(),
                    LoserId: $('#loserSelect').val(),
                    WinnerPocketedEightball: $('#winnerPocketedEightball').is(':checked')
                }
            }).done(function (result) {
                var type = result.substring(0, result.length) === "Game Registered successfully" ? "success" : "danger";
                Notify(result, type, type === "success" ? true : false);
            });
        });

        $('#compare').click(function () {
            if (!bothPlayerSelected()) {
                Notify("Select two players to compare", "danger", false);
                return;
            }
            var winnerSidePlayerId = $("#winnerSelect").val();
            var runnerUpSidePlayerId = $("#loserSelect").val();

            location.href = "/Home/PlayerComparison?winnerSidePlayerId=" + winnerSidePlayerId + "&runnerUpSidePlayerId=" + runnerUpSidePlayerId;
        });

        $(".eightball-radio-btn").click(function() {
            if ($(this).hasClass("active-eightball")) {
                return;
            }
            $(".eightball-radio-btn").toggleClass("active-eightball");
            $(this).siblings('input[type="radio"]').prop("checked", true);
        });

        $("select").change(function () {
            $(".intersect-highlight").removeClass("intersect-highlight");
            var playerName = $(this).find("option:selected").text();
            var playerIndex = $('th[data-player-name="' + playerName + '"]').index() + 1;
            var playerColumn = $('.scoreboard tr td:nth-child(' + playerIndex + ')');
            var playerRow = $('tr[data-player-name="' + playerName + '"]');

            var classToUse = $(this).is("#winnerSelect") ? "winner-highlight" : "loser-highlight";
            $(".scoreboard tr, .scoreboard tr td").removeClass(classToUse);
            playerColumn.addClass(classToUse);
            playerRow.children("td").addClass(classToUse);
            $(".winner-highlight.loser-highlight").addClass("intersect-highlight");

            printPlayerStats($(this));
        });
    });
    function printPlayerStats(select) {
        select.siblings(".player-mini-table").remove();
        $.ajax({
            url: '/Home/GetPlayerStatistics',
            data: {
                playerId: select.val()
            },
            success: function(data) {
                var playerWrapper = select.closest(".player-wrapper");
                var output = '<table class="table player-mini-table"><tr><td>Games played</td><td class="text-center">' + (data.Wins + data.Losses) + '</td></tr><tr><td>Wins</td><td class="text-center">' + data.Wins + '</td></tr><tr><td>Losses</td><td class="text-center">' + data.Losses + '</td></tr><tr><td>Win ratio</td><td class="text-center">' + data.WinRatio + '</td></tr><tr><td>Winning eightballs</td><td class="text-center">' + data.WinningEightBalls + '</td></tr><tr><td>Eightballs of death</td><td class="text-center">' + data.LosingEightBalls + '</td></tr></table>';
                playerWrapper.append(output);
                select.siblings(".player-mini-table").hide().fadeIn(500);
                playerWrapper.css("height", playerWrapper.outerHeight());
            }
        });
    }

    function bothPlayerSelected() {
        return $("#loserSelect").val() !== "Select runner up" && $("#winnerSelect").val() !== "Select winner";
    }

    function Notify(message, type, reload, delay) {
        if (message === undefined)
            return;
        if (type === undefined)
            type = 'info';
        if (delay === undefined)
            delay = 2000;
        $.notify({
            // options
            message: message
        }, {
            // settings
            type: type,
            placement: {
                from: "top",
                align: "center"
            },
            offset: {
                y: 133
            },
            delay: delay,
            onClosed: function () {
                if (reload) {
                    location.reload();
                }
            }
        });
    }
</script>
